name: 'Snyk-iac'
description: 'Find security issues in your Infrastructure as Code files.'
author: 'ixxeL'
inputs:
  api-token:
    description:  Your Snyk token. May be an user token or a service account.
    required: true
  format:
    description: 'Format result. [json, sarif]'
    required: false
    default: ''
  threshold:
    description: 'Only report configuration issues with the provided severity level or higher [low,medium,high,critical]'
    required: false
    default: 'low'
  depth:
    description: 'Indicate the maximum depth of sub-directories to search. default: unlimited'
    required: false
    default: ''
  org:
    description: 'Specify the <ORG_NAME> to run Snyk commands tied to a specific organization. This will influence private tests limits.'
    required: false
    default: ''
  output-json:
    description: 'Redirect report to a JSON file'
    required: false
    default: '""'    
  output-sarif:
    description: 'Redirect report to a SARIF file'
    required: false
    default: '""'
  exit-zero:
    description: 'Force exit 0 code'
    required: false
    default: 'true'      
  working-dir:
    description: 'directory in which to find the Dockerfile'
    required: false
    default: '.'

runs:
  using: "composite"
  steps:
    - id: snyk-iac
      run: |
        set +e
        echo -e "${BLUE}[ STEP - IaC security scan ] > IaC code security scan with Snyk.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Snyk version.${BLANK}"
        snyk --version
        echo -e "${YELLOW}[ EXECUTING ] > Login with Snyk.${BLANK}"
        snyk auth ${{ inputs.api-token }}
        EXIT=$?
        if [[ ${EXIT} = 0 ]]
        then
          echo -e "${GREEN}[ SUCCESS ] > Snyk auth succeeded.${BLANK}"
        else
          echo -e "${RED}[ FAIL ] > Snyk auth failed.${BLANK}"
          exit ${EXIT}
        fi
        echo -e "${YELLOW}[ EXECUTING ] > Executing Snyk IaC test for org ${{ inputs.org }} on ${{ inputs.working-dir }} with threshold ${{ inputs.threshold }}.${BLANK}"

        if [[ ${{ inputs.format }} = "json" ]]
        then
          FORMAT="--json | jq -C"
        elif [[ ${{ inputs.format }} = "sarif" ]]
        then
          FORMAT="--sarif"
        else
          FORMAT=""
        fi

        if [[ -z ${{ inputs.depth }} ]]
        then
          DEPTH="--detection-depth=${{ inputs.depth }}"
        else
          DEPTH=""
        fi

        if [[ -n ${{ inputs.output-json }} ]]
        then
          OUTPUT="--json-file-output=${{ inputs.output-json }}"
        elif [[ -n ${{ inputs.output-sarif }} ]]
        then
          OUTPUT="--json-file-output=${{ inputs.output-sarif }}"
        else
          OUTPUT=""
        fi
  
        snyk iac test --severity-threshold=${{ inputs.threshold }} \
                      --org=${{ inputs.org }} \
                      ${DEPTH} \
                      ${OUTPUT} \
                      ${FORMAT}

        EXIT_CODE="${PIPESTATUS[0]}"
        if [[ ${EXIT_CODE} -ne 0 && ${{ inputs.exit-zero }} != true]]
        then
          echo -e "${RED}[ FAIL ] > Bandit scan failed.${BLANK}"
          exit ${EXIT_CODE}
        else
          echo -e "${GREEN}[ SUCCESS ] > Bandit scan succeeded.${BLANK}"
        fi
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m